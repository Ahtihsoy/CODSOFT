import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

class BankAccount {
    private double balance;
    private String pin;

    public BankAccount(double initialBalance, String pin) {
        this.balance = initialBalance;
        this.pin = pin;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        balance += amount;
    }

    public boolean withdraw(double amount) {
        if (amount <= balance) {
            balance -= amount;
            return true;
        }
        return false;
    }

    public boolean checkPIN(String inputPIN) {
        return pin.equals(inputPIN);
    }
}

public class ATM extends JFrame implements ActionListener {
    private BankAccount account;
    private JTextField amountField;
    private JLabel balanceLabel;
    private JTextField pinField;
    private boolean authenticated;

    public ATM (BankAccount account) {
        this.account = account;
        this.authenticated = false;
        setTitle("ATM Machine");
        setSize(600, 450);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        JPanel topPanel = new JPanel();
        topPanel.setLayout(new GridLayout(3, 1));
        JLabel pinLabel = new JLabel("Enter PIN:");
        topPanel.add(pinLabel);
        pinField = new JPasswordField(10);
        topPanel.add(pinField);
        JButton pinButton = new JButton("Enter");
        pinButton.addActionListener(this);
        topPanel.add(pinButton);
        add(topPanel, BorderLayout.NORTH);

        JPanel centerPanel = new JPanel();
        centerPanel.setLayout(new FlowLayout());
        amountField = new JTextField(10);
        centerPanel.add(amountField);
        JButton withdrawButton = new JButton("Withdraw");
        withdrawButton.addActionListener(this);
        centerPanel.add(withdrawButton);
        JButton depositButton = new JButton("Deposit");
        depositButton.addActionListener(this);
        centerPanel.add(depositButton);
        JButton checkBalanceButton = new JButton("Check Balance");
        checkBalanceButton.addActionListener(this);
        centerPanel.add(checkBalanceButton);
        add(centerPanel, BorderLayout.CENTER);

        JPanel bottomPanel = new JPanel();
        bottomPanel.setLayout(new FlowLayout());
        balanceLabel = new JLabel();
        bottomPanel.add(balanceLabel);
        add(bottomPanel, BorderLayout.SOUTH);
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (!authenticated) {
            authenticatePIN();
            return;
        }

        String amountStr = amountField.getText();
        double amount = 0;
        try {
            amount = Double.parseDouble(amountStr);
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid amount entered!");
            return;
        }

        if (e.getActionCommand().equals("Withdraw")) {
            if (amount <= 0) {
                JOptionPane.showMessageDialog(this, "Amount must be greater than 0!");
            } else if (account.withdraw(amount)) {
                JOptionPane.showMessageDialog(this, "Withdrawal successful! New balance: $" + account.getBalance());
                balanceLabel.setText("Balance: $" + account.getBalance());
            } else {
                JOptionPane.showMessageDialog(this, "Insufficient funds!");
            }
        } else if (e.getActionCommand().equals("Deposit")) {
            if (amount <= 0) {
                JOptionPane.showMessageDialog(this, "Amount must be greater than 0!");
            } else {
                account.deposit(amount);
                JOptionPane.showMessageDialog(this, "Deposit successful! New balance: $" + account.getBalance());
                balanceLabel.setText("Balance: $" + account.getBalance());
            }
        } else if (e.getActionCommand().equals("Check Balance")) {
            JOptionPane.showMessageDialog(this, "Current balance: $" + account.getBalance());
        }
    }

    private void authenticatePIN() {
        String inputPIN = pinField.getText();
        if (account.checkPIN(inputPIN)) {
            authenticated = true;
            balanceLabel.setText("Balance: $" + account.getBalance());
            pinField.setText("");
            pinField.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this, "Invalid PIN!");
            pinField.setText("");
        }
    }

    public static void main(String[] args) {
        BankAccount account = new BankAccount(1000, "1234"); // Initial balance and PIN
        ATM atm = new ATM (account);
        atm.setVisible(true);
    }
}
